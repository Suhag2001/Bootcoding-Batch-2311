JAVA OVERVIEW

• Java was developed by James Gosling, Patrick Naughton, Mike Sheridan at
Sun Microsystems Inc. in 1991. It took 18 months to develop the first working
version.
• The initial name was Oak but it was renamed to Java in 1995 as OAK was a
registered trademark of another Tech company.

Application of Java

Java is widely used in every corner of world and of human life. Java is not only
used in software but is also widely used in designing hardware controlling
software components. There are more than 930 million JRE downloads each
year and 3 billion mobile phones run java.

Followinq are some other usage of Java :
-Developing Desktop Applications
-Web Applications like Linkedin.com, Snapdeal.com
-Mobile Operating System like Android
-Embedded Systems
-Robotics and games etc.


Features Of Java

Simple
Object-Oriented
Portable
Platform independent
Secured
Robust
Architecture neutral
Interpreted
High Performance
Multithreaded
Distributed
Dynamic




Java Naming Conventions:

Classes and Interfaces:
Class names should be nouns, in mixed case but first letter should be in Uppercase.
Interface names follow the same rule.
Avoid acronyms(short forms eg.LOL) and abbreviations(short forms eg.incl.,comp.).
Examples:
interface Bicycle
class MountainBike 

Methods:
Methods should be verbs, in mixed case.
First letter lowercase, with internal words capitalized.
Examples:
void changeGear(int newValue);
void speedUp(int increment);
void applyBrakes(int decrement);

Variables:
Short yet meaningful names.
Can start with '_' or '$'.
Mnemonic(purpose), indicating intent of use.
Avoid one-character names, except for temporary variables.
Examples:
int speed = 0;
int gear = 1;

Constant Variables:
Uppercase with underscores(_).
Used for predefined classes like Float, Long, String.
Examples:
static final int MIN_WIDTH = 4;
public static final float POSITIVE_INFINITY = 1.0f / 0.0f;




Comments in Java:

Purpose:
Comments are non-executable text used to explain code.
That enh
ance code readability and provide insights to developers.

Types:
Single-Line Comments: Begin with // and extend to the end of the line.
Example:
// This is a single-line comment


Multi-Line Comments: Enclosed between /* and */.
Example:
/*
This is a
multi-line comment
*/

Usage of Comments:
Explain complex logic, provide context, or document code.
Use comments sparingly; write self-explanatory code when possible.
Example:
int result = x + y;  // Calculate the sum of x and y


Primitive Data Types:

1) byte: 8-bit(1 Byte) signed integer.
Example:
byte myByte = 127;

short: 16-bit(2 Byte) signed integer.
Example:
short myShort = 32000;

int: 32-bit(4 Byte) signed integer.
Example:
int myInt = 2147483647;

long: 64-bit(8 Byte) signed integer.
Example:
long myLong = 9223372036854775807L;

float: 32-bit(4 Byte) floating-point.
Example:
float myFloat = 3.14f;(using f suffix)

double: 64-bit(8 Byte) floating-point. 
Example:
double myDouble = 3.141592653589793;

char: 16-bit(2 Byte) Unicode character.
Example:
char myChar = 'A';

boolean: Represents true or false.
Example:
boolean myBoolean = true;

Reference Data Types:

String: A sequence of characters.
Example:
String myString = "Hello, Java!";

Arrays: Ordered collection of elements.
Example:
int[] myArray = {1, 2, 3, 4, 5};

Classes: User-defined data types.
Example:
class MyClass {
    // Class members and methods
}
MyClass myObject = new MyClass();


Literals:
A literal in programming refers to the notation of expressing values directly in the source code of a program.

Examples of literals:
Numeric literals: 42, 3.14f.
String literals: "Hello, World!", "Java".
Character literals: 'A', '5'.

Identifiers:
An identifier is a name given to a programming element, such as a variable, method, class, or package.

Examples of identifiers:
Variable identifier: myVariable, totalAmount.
Method identifier: calculateTotal, displayMessage.
Class identifier: MyClass, AnotherClass.
Package identifier: com.example.myapp.

*Stack and Heap Memory 

primitive variables are store into the stack memory 

Reference variables are store into the heap memory

There are three types of Variables : 

1. Local Variable

A variable defined within a block or method or constructor is called a local variable. 

2. Instance Variable

Instance variables are declared in a class outside of any method, constructor, or block. 

3. Static Variable

static variables are declared in a class outside of any method, constructor, or block by using static keyword. 



Operators in Java: 

1) Arithmetic Operator :

+ : Addition
- : Subtraction
* : Multiplication
/ : Division
% : Modulus

2) Assignment Operator :

=  : Simple assignment
+= : Add and assign
-= : Subtract and assign
*= : Multiply and assign
/= : Divide and assign
%= : Modulus and assign

3)Increament and Decreament Operator :

a++ : Post-increment
++a : Pre-increment
a-- : Post-decrement
--a : Pre-decreament

4) Relational Operator :

== : Equal to
!= : Not equal to
>  : Greater than
<  : Less than
>= : Greater than or equal to
<= : Less than or equal to

5) Logical Operator :

&& : Logical AND
|| : Logical OR
!  : Logical NOT

6) Ternary Operator : 

? : Ternary Operator

result = (condition) ? valueIfTrue : valueIfFalse



Type Conversion (Type Casting / Casting)  :
 
Type casting is the process of converting a variable from one data type to another


Implicit Type Casting (Automatic Type Casting)(Widening):

Java automatically performs implicit casting when converting from a smaller data type to a larger data type.

For example, converting an int to a double or a byte to an int is done implicitly.
(int --> double)(byte --> int)

It is safe because there is no chance to lose data.

Explicit Casting (Manual Type Casting)(Narrowing):

Explicit casting is required when converting from a larger data type to a smaller data type.

It involves placing the desired data type in parentheses before the variable to be cast.
ex. loverVariable = (target Data Type) higherVariable

It's not safe because there is more chances to lose data

                         
Type Conversion between integers and string 


Integer to String : 

1.Integer.toString(intValue);
2.String.valueOf(intValue);
3.String.formate("%d",intValue);						 
4.String concatination ;

String to Integer : 
1.Integer.parseInt(strValue);
2.Integer.valueOf(strValue);
3.By using Scanner class	


Java Control Flow Statements : 		

-Decision Making statements : decision-making statements decide which statement to execute and when.

1)if statements
2)switch statement

-Loop statements : A loop is a control flow structure that iteratively executes a set of 
instructions based on a specified condition or over a sequence of elements, automating repetitive tasks in the code..

1)for loop      : Use it If the number of iteration is fixed, it is recommended to use for loop.

2)while loop    : Use it If the number of iteration is not fixed, it is  recommended to use while loop.

3)do while loop :Use it if the number of iteration is not fixed and you must have to execute the loop at least once.

4)for-each loop : The for-each loop is used to traverse array or collection in Java. 
                 It is easier to use than simple for loop because we don't need to increment
				 value and use subscript notation.

-Jump statements : Jump statements are used to transfer the control of the program to the specific statements.

1)break statement  : The Java break statement is used to break loop or switch statement. 
                     It breaks the current flow of the program at specified condition.
					 
2)continue statement : The continue statement is used in loop control structure when you need to jump to the next iteration of the loop immediately.			 
						 

Scanner class in java :

-The Scanner class of the java.util package is used to read input data from different sources 
like input streams, users, files, etc.

nextInt()	reads an int value from the user
nextFloat()	reads a float value form the user
nextBoolean()	reads a boolean value from the user
nextLine()	reads a line of text from the user
next()	reads a word from the user
nextByte()	reads a byte value from the user
nextDouble()	reads a double value from the user
nextShort()	reads a short value from the user
nextLong()	reads a long value from the user
next.charAt(0) reads only one charactor 						
						
	

System class in Java : 

 -The System class in Java is a final class that belongs to the java.lang package.
 -It contains several useful class fields and methods, and it cannot be instantiated.	
 
 These are three refference variables are use for i/o operations :
 
  public static final java.io.InputStream in;
  public static final java.io.PrintStream out;
  public static final java.io.PrintStream err;
  
				
Command Line Arguments : 

-The java command-line argument is an argument i.e. passed at the time of running the java program.

-The arguments passed from the console can be received in the java program and it can be used as an input.				



Method : 

-In Java, a method is a block of code that performs a specific task. 
-Methods are also commonly known as functions.
-Each method has its name. 
-You can pass data into a method via parameters. 
-A method also has a return type defining the type of data it returns.


Method signature : 
-In Java, a method signature is part of the method declaration. 
-It's the combination of the method name and the parameter list.


Method declaration

In general, method declaration has the following components: 

Access Modifier: 
-Defines the access type i.e. from where the method can be accessed in your program e.g. public, private,protected and default . 
-It is public in this case, which means this method can be accessed outside of the class too.

Return Type: 
-The data type of the value that the method returns. 
-In this case, it is void i.e. does not return anything.

Method Name: 
-It is the name of the method by which it will be called in our program. 
-The name of our method is printName.

Parameter List: 
-It is the list of data that needs to be passed into the method. 
-It is comma-separated and each input data is preceded by its datatype. 
-If there is no data to be passed the brackets () are left empty. 
-We have passed one parameter name of type String.

Method body: 
-It consists of the code that needs to be executed enclosed within curly braces {}.


Method Calling  :

 -To call a method, you need to define it, 
 -create an instance of the class (if needed), 
 -and call the method using the name and any arguments it takes
 
 
The flow of method execution in Java is as follows:

-The program starts executing at the main method, which is the entry point for the program.

-The main method can call other methods or execute statements within its body.

-When a method is called, the control of the program is transferred to the method that is called.

-The called method executes its statements in sequence.

-When the called method finishes executing, the control of the program is transferred back to the main method  .

-The program continues executing in this way until the main method finishes executing.


Method Parameter : Parameters refers to the list of variables in a method declaration. 

Method Arguments : Arguments are the actual values that are passed in when the method is invoked. 

Return Type : 

-A method can return at most one value. The method signature specifies the return type, which can be a primitive (int, double, boolean), a class (String, User-defined class, Collection classes etc), or void  .


Math Methods : There are lots of Pre-defined methods are available in java for doing some mathemetical operations , you can use it by using Math class .

Here is a list of useful Math methods in Java:

abs(int a): : This method returns the absolute value of an integer.
ceil(double a): : This method returns the smallest integer greater than or equal to a given double.
round(double a): : This method returns the rounded value of a double.
floor(double a): : This method returns the largest integer less than or equal to a given double.
max(int a, int b): : This method returns the larger of two integers.
min(int a ,  int b )
pow(double a, double b): : This method returns the power of a double to another double.
random(): : This method returns a random double between 0.0 and 1.0.
sqrt(double a): : This method returns the square root of a double.


Array : An array is a data structure that stores a collection of elements of the same data type .


Creation of an Array :  There are three ways to create an array object

 1)   int[] arr = {1,2,3,4,5};
 2)   int[] arr = new int[5];
 3)   int[] arr = new int[]{1,2,3,4,5};

Memory Allocation:
-Arrays are allocated contiguous memory locations(next to each other) to store elements of the specified data type . 
-The size of the array, once determined, remains fixed.

Indexing:
-Java arrays are zero-indexed, meaning the index of the first element is 0, the second element is at index 1, and so on. 
-The elements are accessed using square bracket notation: array[index].

Type-Specific:
-Java arrays are type-specific, meaning they can only hold elements of the specified data type. 
-For example, if you declare an array of integers, you cannot store other types of data in that array.

Length Property:
-Every array in Java has a length property that indicates the number of elements in the array. 
-This property is accessed using the syntax array.length.
	
Immutable Size:
-The size of an array in Java is fixed once it is created. 

Performance:
-Array access is very fast and efficient because it involves simple pointer arithmetic. 
-Retrieving an element from an array using its index is a constant-time operation.

Bounds Checking:
-Java performs bounds checking to ensure that you do not access elements outside the valid index range.
-If you try to access an element with an index that is less than 0 or greater than or equal to the array length, 
-an ArrayIndexOutOfBoundsException is thrown.

